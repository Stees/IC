#! /usr/bin/env python
#code takes pseudo atoms, force field def, force field mixing rules, the relevant cif, and molecule definition files and copy them into directories created for each pressure the user wants to run for the isotherm. Writes the job.pbs and simulation.input files. Submits the jobs.

import subprocess
import time
import readline
import numpy as np
import math
import sys

getHost = subprocess.Popen('hostname', stdout=subprocess.PIPE)
host = getHost.communicate()[0].split()[0]

if 'login1.crc.pitt.edu' in host:
    #make sure there are def and cif files in the directory
    checkFile = subprocess.Popen('ls', stdout=subprocess.PIPE)
    checkFiles = checkFile.communicate()[0]
    getDir = subprocess.Popen('pwd', stdout=subprocess.PIPE)
    location = getDir.communicate()[0].split()
    mol = ''
    if '.cif' in checkFiles and '.def' in checkFiles:
        cifFile = subprocess.Popen('ls *.cif', stdout=subprocess.PIPE, shell=True)
        cif = str(str(cifFile.communicate()[0].split()[0]).rsplit('.cif')[0])
        #determine the components of the calculation
        componentsPre = subprocess.Popen('bash -O extglob -c "ls !(+(p*|f*))+(.def)"', stdout=subprocess.PIPE, shell=True)
        components = componentsPre.communicate()[0].splitlines()
        for component in components:
            mol+=str(component.replace('.def',''))+'_'
        np.set_printoptions(suppress=True)
        mode = 0
        while (mode != 1 and mode != 2):
            modeSelection = raw_input('\nDo you want to:\n1: Add points to an existing calculation.\n2: Create a new isotherm.\n\n')
            try:
                mode = int(modeSelection.replace(' ',''))
                if (mode != 1 and mode != 2):
                    print('\nInvalid entry. Try again.\n')
            except:
                print('\nInvalid entry. Try again.\n')
        if mode == 1:
            #get calculations in the current directory, display them, and get the user to select the one they want to add points to.
            getDirs = subprocess.Popen('find . -maxdepth 1 -mindepth 1 -type d', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            dirs = getDirs.communicate()[0].splitlines()
            if not dirs:
                print('\nIt looks like there aren\'t any calculations here yet.\n')
                time.sleep(0.5)
                print('\nExiting.\n')
                time.sleep(0.5)
                sys.exit()
            print('\nChoose one of the following calculations to add points to.\n')
            for j, line in enumerate(dirs):
                print('{0}: {1}'.format(j, line.replace('./','')))
            addCalc = -1
            while addCalc == -1:
                chooseCalc = raw_input('\nType the number corresponding to your choice.\n')
                try:
                    calcNum = int(chooseCalc.replace(' ',''))
                    if (calcNum >= 0 and calcNum <= j):
                        addCalc = calcNum
                    else:
                        print('\nInvalid entry. Try again.\n')
                except:
                    print('\nInvalid entry. Try again.\n')
            #read void fraction, initialization cycles, production cycles, temperature from the previous calculation directory.
            getADir = subprocess.Popen('ls | head -1', stdout=subprocess.PIPE, cwd=dirs[addCalc], shell=True)
            gotDir = getADir.communicate()[0].rstrip()
            tempDir = dirs[addCalc]+'/'+gotDir+'/simulation.input'
            getVoid = subprocess.Popen("grep 'Void' {0} | awk 'NR==1 {{print $2}}'".format(tempDir), stdout=subprocess.PIPE, shell=True)
            voidFraction = float(getVoid.communicate()[0].rstrip())
            getInitialization = subprocess.Popen("grep 'Initialization' {0} | awk 'NR==1 {{print $2}}'".format(tempDir), stdout=subprocess.PIPE, shell=True)
            numICycles = int(getInitialization.communicate()[0].rstrip())
            getProduction = subprocess.Popen("grep 'NumberOfCycles' {0} | awk 'NR==1 {{print $2}}'".format(tempDir), stdout=subprocess.PIPE, shell=True)
            numCycles = int(getProduction.communicate()[0].rstrip())
            getTemp = subprocess.Popen("grep 'Temperature' {0} | awk 'NR==1 {{print $2}}'".format(tempDir), stdout=subprocess.PIPE, shell=True)
            temp = float(getTemp.communicate()[0].rstrip())
            #get the component lines from the input file
            getComponentLines = subprocess.Popen("awk '/Component/{{y=1}}y' {0}".format(tempDir), stdout=subprocess.PIPE, shell=True)
            componentLines = getComponentLines.communicate()[0].splitlines()
            #determine the pressure interval the user wants to test
            appPresMin = 0
            print('\nNow specify the pressure range you want to test.\n')
            while appPresMin == 0:
                tempPres = raw_input('What is the minimum pressure of the range? (mbar)\n')
                try:
                    if isinstance(float(tempPres), float):
                        appPresMin = float(tempPres.replace(" ",""))
                    else:
                        print('\nInvalid entry. Try again.\n')
                except:
                    print('\nInvalid entry. Try again.\n')
            appPresMax = 0
            while appPresMax == 0:
                tempPres = raw_input('What is the maximum pressure of the range? (mbar)\n')
                try:
                    if isinstance(float(tempPres), float):
                        appPresMax = float(tempPres.replace(" ",""))
                    else:
                        print('\nInvalid entry. Try again.\n')
                except:
                    print('\nInvalid entry. Try again.\n')
            #make the pressure range
            pressures = np.linspace(appPresMin,appPresMax,num=10,endpoint=False)
            #get the current directories, and make sure we none of the pressures are in the list of directories
            getCurrentDirs = subprocess.Popen('find ./{0} -maxdepth 1 -mindepth 1 -type d'.format(dirs[addCalc]), stdout=subprocess.PIPE, shell=True)
            currentDirs = getCurrentDirs.communicate()[0].splitlines()
            Pressures = []
            for pressure in pressures:
                flag = False
                for existing in currentDirs:
                    if float(pressure) == float(existing.rsplit('/',1)[1].replace('mbar','')):
                        print('{0}'.format(float(existing.rsplit('/',1)[1].replace('mbar',''))))
                        flag = True
                if flag == False:
                    Pressures.append(pressure)
            appString = ''
            head = dirs[addCalc].replace('./','')
        elif mode == 2:
            #get maximum pressure, temperature, number of cycles, number of initialization cycles, void fraction
            temp = 0
            while temp == 0:
                preTemp = raw_input('\nAt what temperature should this isotherm be run? (K)\n')
                try:
                    if isinstance(float(preTemp), float):
                        temp = float(preTemp.replace(" ",""))
                    else:
                        print('\nInvalid entry. Try again.\n')
                except:
                    print('\nInvalid entry. Try again.\n')
            temp = preTemp.replace(" ","") + '.0'
            maxPressure = 0
            while maxPressure == 0:
                prePres = raw_input('\nWhat is the maximum pressure of the isotherm? (mbar)\n')
                try:
                    if isinstance(float(prePres), float):
                        maxPressure = float(prePres.replace(" ",""))
                    else:
                        print('\nInvalid entry. Try again.\n')
                except:
                    print('\nInvalid entry. Try again.\n')
            numICycles = 0
            while numICycles == 0:
                numICyclesPre = raw_input('\nHow many initialization cycles are needed?\n')
                try:
                    numICycles = int(math.floor(int(numICyclesPre))) + 1
                except:
                    print('\nYou made an invalid entry. Try again.\n')
            numCycles = 0
            while numCycles == 0:
                numCyclesPre = raw_input('\nHow many production cycles are needed?\n')
                try:
                    numCycles = int(math.floor(int(numCyclesPre))) + 1
                except:
                    print('\nYou made an invalid entry. Try again.\n')
            voidFraction = 2.0
            voidHold = 0
            while voidHold != 1:
                while (voidFraction > 1.0 or voidFraction < 0.0):
                    if (voidFraction != 2):
                        print('Try again.\n')
                    try:
                        voidFraction = float(raw_input('\nEnter the He void fraction of the MOF.\n'))
                        voidHold = 1
                    except:
                        print('\nInvalid entry.\n')
            #create the pressure values that will be used in the calculation
            pressures = np.linspace(0,1,num=20,endpoint=False)
            bigPressures = np.array([],dtype=float)
            for pres in pressures:
                P = round(maxPressure * pres ** 2,2)
                bigPressures = np.append(bigPressures, P)
            #medium range low pressures
            midPressuresPre = np.linspace(0,1,num=10,endpoint=False)
            midPressures = np.array([],dtype=float)
            for pres in midPressuresPre:
                P = round(pres ** 3,5)
                midPressures = np.append(midPressures, P)
            #make low pressures
            smallPressures = np.array([],dtype=float)
            pressures2 = np.linspace(0,0.5,num=10,endpoint=True)
            for pres in pressures2:
                p = round(pres ** 9,10)
                smallPressures = np.append(smallPressures, p)
            tempArray = np.array(np.append(smallPressures,midPressures),dtype=float)
            Pressures = np.array(np.unique(np.append(tempArray,np.unique(bigPressures))),dtype=float)
            #make the head directory
            head = cif.rsplit('_')[0]+'_'+mol+temp.rsplit('.')[0]+'K_DDEC6_UFF'
            #check if the head directory already exists
            headDirEx = subprocess.Popen('find ./ -name {0}'.format(head), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            headDirExists = headDirEx.communicate()[0]
            if not headDirExists:
                headDir = subprocess.Popen('mkdir {0}'.format(head), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                appString = ''
            else:
                print('\nA similar calculation already exists. Let\'s add an identifier so you can tell them apart.\n')
                hole = 0
                while hole == 0:
                    try:
                        appString = raw_input('What should I add to the directory name?\n').replace(" ","")
                        if not appString:
                            print('\nLet\'s try that again.\n')
                        else:
                            headDirEx = subprocess.Popen('find ./ -name {0}_{1}'.format(head,appString), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                            headDirExists = headDirEx.communicate()[0]
                            if not headDirExists:
                                hole = 1
                                print('\nThat will work.')
                            else:
                                print('\nThat calculation also exists. Let\'s try one more time.\n')
                    except:
                        print('Let\'s try that again.\n')
                head = head + '_' + appString
                headDir = subprocess.Popen('mkdir {0}'.format(head), stderr=subprocess.PIPE, shell=True)
            time.sleep(0.09)
            subprocess.Popen('touch Isotherm', cwd=head, shell=True)
        trueFlag = False
        noFlag = False
        parameterArray = []
        if mode == 1:
            print('\n\nCalculations:\n')
        for pressure in Pressures:
            fil = str(location[0]) + '/' + head + '/' + str(pressure) + 'mbar'
            createDir = subprocess.Popen('mkdir {0}'.format(fil), stdout=subprocess.PIPE, shell=True)
            #copy the necessary to each directory
            time.sleep(0.09)
            copyfile = subprocess.Popen('cp *.def {0}'.format(fil), shell=True)
            copyfile2 = subprocess.Popen('cp *.cif {0}'.format(fil), shell=True)
            #write the simulation.input file
            inputFile = open('{0}/simulation.input'.format(fil), 'w')
            inputFile.write('SimulationType\tMonteCarlo\n')
            inputFile.write('NumberOfCycles\t{0}\n'.format(numCycles))
            inputFile.write('NumberOfInitializationCycles\t{0}\n'.format(numICycles))
            inputFile.write('PrintEvery\t100\n')
            inputFile.write('RestartFile\tno\n\n')
            inputFile.write('ContinueAfterCrash\tno\n')
            inputFile.write('WriteBinaryRestartFileEvery\t5000\n\n')
            inputFile.write('ChargeMethod\tEwald\n')
            inputFile.write('Cutoff\t14.0\n')
            inputFile.write('OmitInterMolecularInteractions\tno\n')
            inputFile.write('OmitAdsorbateAdsorbateVDWInteractions\tno\n')
            inputFile.write('OmitAdsorbateAdsorbateCoulombInteractions\tno\n\n')
            inputFile.write('UseChargesFromCIFFile\tyes\n')
            inputFile.write('Forcefield\tGenericMOFs\n\n')
            inputFile.write('Framework\t0\n')
            inputFile.write('FrameworkName\t{0}\n'.format(cif))
            inputFile.write('UnitCells 2 2 2\n')
            inputFile.write('HeliumVoidFraction\t{0}\n'.format(voidFraction))
            inputFile.write('ExternalTemperature\t{0}\n'.format(temp))
            inputFile.write('ExternalPressure\t{0}\n\n'.format(str(pressure*100)))
            if mode == 1:
                #print the component lines from simulation.input
                for line in componentLines:
                    inputFile.write('{0}\n'.format(line))
            elif mode == 2:
                #determine if manual override is desired for these probabilities, unless they have already been set.
                if trueFlag == True:
                    for j in range(0,len(components)):
                        inputFile.write('Component {0} MoleculeName\t{1}\n'.format(j,parameterArray[j][0]))
                        inputFile.write('\tMoleculeDefinition\tTraPPE\n')
                        inputFile.write('\tMolFraction\t{0}\n'.format(parameterArray[j][1]))
                        inputFile.write('\tTranslationProbability\t{0}\n'.format(parameterArray[j][2]))
                        inputFile.write('\tRotationProbability\t{0}\n'.format(parameterArray[j][3]))
                        inputFile.write('\tReinsertionProbability\t{0}\n'.format(parameterArray[j][4]))
                        inputFile.write('\tSwapProbability\t\t{0}\n'.format(parameterArray[j][5]))
                        inputFile.write('\tCBMCProbability\t\t{0}\n'.format(parameterArray[j][6]))
                        inputFile.write('\tCFSwapLambdaProbability\t\t{0}\n'.format(parameterArray[j][7]))
                        inputFile.write('\tCreateNumberOfMolecules\t0\n\n')
                else:
                    if noFlag == True:
                        for j, component in enumerate(components):
                            inputFile.write('Component {0} MoleculeName\t{1}\n'.format(j,component.replace(".def","")))
                            inputFile.write('\tMoleculeDefinition\tTraPPE\n')
                            inputFile.write('\tTranslationProbability\t0.5\n')
                            inputFile.write('\tRotationProbability\t0.5\n')
                            inputFile.write('\tReinsertionProbability\t0.0\n')
                            inputFile.write('\tSwapProbability\t\t1.0\n')
                            inputFile.write('\tCreateNumberOfMolecules\t0\n\n')
                    else:
                        print('\nDo you want to manually specify the move probabilities?\n')
                        override = 'A'
                        while (override != 'n' and override != 'y'):
                            tempVAR = raw_input('y/n\n')
                            if tempVAR == 'y':
                                override = 'y'
                                print('\nEnter all values as decimals.\n')
                                #get and print the parameters
                                for j, tComponent in enumerate(components):
                                    component = tComponent.replace(".def","")
                                    inputFile.write('Component {0} MoleculeName\t{1}\n'.format(j,component))
                                    inputFile.write('\tMoleculeDefinition\tTraPPE\n')
                                    molFrac = -1
                                    while molFrac == -1:
                                        tempProb = raw_input('\nMol Fraction for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                molFrac = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    translateProb = -1
                                    while translateProb == -1:
                                        tempProb = raw_input('\nTranslation probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                translateProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    rotationProb = -1
                                    while rotationProb == -1:
                                        tempProb = raw_input('\nRotation probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                rotationProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    reinsertionProb = -1
                                    while reinsertionProb == -1:
                                        tempProb = raw_input('\nReinsertion probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                reinsertionProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    swapProb = -1
                                    while swapProb == -1:
                                        tempProb = raw_input('\nSwap probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                swapProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    cbmcProb = -1
                                    while cbmcProb == -1:
                                        tempProb = raw_input('\nCBMC probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                cbmcProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    cfmcProb = -1
                                    while cfmcProb == -1:
                                        tempProb = raw_input('\nCF Swap Lambda probability for {0}?\n'.format(component))
                                        try:
                                            if isinstance(float(tempProb), float):
                                                cfmcProb = float(tempProb.replace(" ",""))
                                            else:
                                                print('\nInvalid entry. Try again.\n')
                                        except:
                                            print('\nInvalid entry. Try again.\n')
                                    inputFile.write('\tMolFraction\t{0}\n'.format(molFrac))
                                    inputFile.write('\tTranslationProbability\t{0}\n'.format(translateProb))
                                    inputFile.write('\tRotationProbability\t{0}\n'.format(rotationProb))
                                    inputFile.write('\tReinsertionProbability\t{0}\n'.format(reinsertionProb))
                                    inputFile.write('\tSwapProbability\t\t{0}\n'.format(swapProb))
                                    inputFile.write('\tCBMCProbability\t\t{0}\n'.format(cbmcProb))
                                    inputFile.write('\tCFSwapLambdaProbability\t\t{0}\n'.format(cfmcProb))
                                    inputFile.write('\tCreateNumberOfMolecules\t0\n\n')
                                    parameterArray.append([component,molFrac,translateProb,rotationProb,reinsertionProb,swapProb,cbmcProb,cfmcProb])
                                trueFlag = True
                                print('\n\nCalculations\n')
                            elif tempVAR == 'n':
                                for j, component in enumerate(components):
                                    inputFile.write('Component {0} MoleculeName\t{1}\n'.format(j,component.replace(".def","")))
                                    inputFile.write('\tMoleculeDefinition\tTraPPE\n')
                                    inputFile.write('\tTranslationProbability\t0.5\n')
                                    inputFile.write('\tRotationProbability\t0.5\n')
                                    inputFile.write('\tReinsertionProbability\t0.0\n')
                                    inputFile.write('\tSwapProbability\t\t1.0\n')
                                    inputFile.write('\tCreateNumberOfMolecules\t0\n\n')
                                    override = 'n'
                                noFlag = True
                                print('\n\nCalculations:\n')
                            else:
                                print('\nInvalid entry. Try again.\n')
            inputFile.close()
            #make the jobfile
            jobfile = open('{0}/job.slurm'.format(fil), 'w')
            jobfile.write('#!/usr/bin/env bash\n')
            if not appString:
                jobfile.write('#SBATCH --job-name="{0}"\n'.format(cif.rsplit("_",1)[0]+'_'+mol+str(temp).split('.',1)[0]+'K_'+str(pressure)+'mbar'))
                jobfile.write('#SBATCH --output="{0}.out"\n'.format(cif.rsplit("_",1)[0]+'_'+mol+str(temp).split('.',1)[0]+'K_'+str(pressure)+'mbar'))
            else:
                jobfile.write('#SBATCH --job-name="{0}"\n'.format(cif.rsplit("_",1)[0]+'_'+mol+str(temp).split('.',1)[0]+'K_'+appString+'_'+str(pressure)+'mbar'))
                jobfile.write('#SBATCH --output="{0}.out"\n'.format(cif.rsplit("_",1)[0]+'_'+mol+str(temp).split('.',1)[0]+'K_'+appString+'_'+str(pressure)+'mbar'))
            jobfile.write('#SBATCH --nodes=1\n')
            jobfile.write('#SBATCH --cluster=smp\n')
            jobfile.write('#SBATCH --partition=test\n')
            jobfile.write('#SBATCH --ntasks-per-node=1\n')
            jobfile.write('#SBATCH --time=6-00:00:00\n')
            jobfile.write('#SBATCH --qos=long\n\n')
            jobfile.write('module purge\n')
            jobfile.write('module load python/anaconda2.7-4.2.0\n')
            jobfile.write('date\n\n')
            jobfile.write('simulate simulation.input\n')
            jobfile.write('date\n')
            jobfile.write('find ./ -type d -exec chmod 750 {} +\n')
            jobfile.write('find ./ -type f -exec chmod 640 {} +\n')
            jobfile.write('exit 0')
            jobfile.close()
            job = subprocess.Popen('sbatch job.slurm', stdout=subprocess.PIPE, cwd=fil, shell=True)
            print('{0} {1}'.format(job.communicate()[0].split()[3],str(pressure)+'mbar'))
            #cleanup = subprocess.Popen('rm *def *cif', shell=True)
    else:
        print('\nYou may not be in the directory you think you are in...\n')
else:
    print('\nYou are logged in to the wrong location. Log in to opa.\n')
